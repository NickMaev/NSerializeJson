{"version":3,"sources":["..\\webpack/universalModuleDefinition","..\\webpack/bootstrap","..\\./src/NSerializeJson.ts","..\\./src/Util.ts","..\\./index.ts","..\\./src/ParserList.ts","..\\./src/Constants.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Util_1","ParserList_1","Constants_1","NSerializeJson","parseValue","type","isStringNullOrEmpty","parsers","filter","x","parse","options","forceNullOnEmpty","parser","pluginName","serializeForm","htmlFormElement","_this","nodeList","querySelectorAll","resultObject","nodeListToArray","disabled","getAttribute","checked","forEach","serializeIntoObject","obj","htmlElement","tagName","toLowerCase","firstSelectOpt","Array","from","selected","pathStr","path","typeIndex","indexOf","substring","length","onBeforeParseValue","parsedValue","pathLength","useDotSeparatorInPath","addArrayToPath","split","step","index","indexOfBrackets","replace","push","map","searchAndSet","currentObj","pathIndex","arrayInternalIndex","isFinalStep","nextStep","console","log","isArrayStep","isIntegerStep","isStringInteger","isNextStepAnArray","useNumKeysAsArrayIndex","parseInt","isArray","parserList","slice","isStringJsonObject","arg","JSON","e","isStringNumber","test","trim","__webpack_exports__","_src_IValueParser__WEBPACK_IMPORTED_MODULE_2__","val","forceNull","result","toString","array","parseFloat"],"mappings":"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","file":"nserializejson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NSerializeJson\"] = factory();\n\telse\n\t\troot[\"NSerializeJson\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { isStringNullOrEmpty, isStringInteger, isArray, nodeListToArray } from \"./Util\";\r\nimport { IValueParser } from \"./IValueParser\";\r\nimport { IOptions } from \"./IOptions\";\r\nimport { parserList } from \"./ParserList\";\r\nimport { pluginName } from \"./Constants\";\r\n\r\nexport class NSerializeJson {\r\n\r\n    static options: IOptions = {\r\n        useNumKeysAsArrayIndex: true,\r\n        useDotSeparatorInPath: false,\r\n        forceNullOnEmpty: false\r\n    };\r\n\r\n    public static parsers: IValueParser[] = [...parserList];\r\n\r\n    private static parseValue(value: string, type: string): any {        \r\n        if (isStringNullOrEmpty(type)) {\r\n            var autoParser = this.parsers.filter(x => x.name === \"auto\")[0];\r\n            return autoParser.parse(value, this.options.forceNullOnEmpty);\r\n        }\r\n        var parser = this.parsers.filter(x => x.name === type)[0];\r\n        if (parser == null) {\r\n            throw `${pluginName}: couldn't find ther parser for type '${type}'.`;\r\n        }\r\n        return parser.parse(value, this.options.forceNullOnEmpty);\r\n    }\r\n\r\n    public static serializeForm(htmlFormElement: HTMLFormElement): object {\r\n        var nodeList = htmlFormElement.querySelectorAll(\"input, select, textarea\");\r\n        var htmlInputElements = nodeListToArray(nodeList) as HTMLInputElement[];\r\n        var checkedElements = htmlInputElements.filter(x => {\r\n            if (x.disabled ||\r\n               ((x.getAttribute(\"type\") === \"radio\" && !x.checked) ||\r\n                (x.getAttribute(\"type\") === \"checkbox\" && !x.checked))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        var resultObject = {};\r\n        checkedElements.forEach(x => this.serializeIntoObject(resultObject, x));\r\n\r\n        return resultObject;\r\n    }\r\n\r\n    public static serializeIntoObject(obj: any, htmlElement: HTMLElement) : any {\r\n        var value = null;\r\n        if (htmlElement.tagName.toLowerCase() === \"select\") {\r\n            var firstSelectOpt = Array.from((htmlElement as any).options).filter(x => (x as any).selected)[0] as any;\r\n            if (firstSelectOpt) {\r\n                value = firstSelectOpt.getAttribute(\"value\");\r\n            }\r\n        } else {\r\n            value = (htmlElement as any).value;\r\n        }\r\n        var pathStr = htmlElement.getAttribute(\"name\");\r\n        if (isStringNullOrEmpty(pathStr))\r\n            return obj;\r\n        var path = [];\r\n        var type:string = null;\r\n        var typeIndex = pathStr.indexOf(\":\");\r\n        if (typeIndex > -1) {\r\n            type = pathStr.substring(typeIndex + 1, pathStr.length);\r\n            if (type === \"skip\") {\r\n                return obj;\r\n            }\r\n            pathStr = pathStr.substring(0, typeIndex);\r\n        } else {\r\n            type = htmlElement.getAttribute(\"data-value-type\");\r\n        }\r\n\r\n        if (this.options.onBeforeParseValue != null) {\r\n            value = this.options.onBeforeParseValue(value, type);\r\n        }\r\n        var parsedValue = this.parseValue(value, type);\r\n\r\n        var pathLength = 0;\r\n        if (this.options.useDotSeparatorInPath) {\r\n            var addArrayToPath: boolean = false;\r\n            path = pathStr.split(\".\");\r\n            pathLength = path.length;\r\n            path.forEach((step, index) => {\r\n                var indexOfBrackets = step.indexOf(\"[]\");\r\n                if (index !== pathLength - 1) {\r\n                    if (indexOfBrackets > -1) {\r\n                        throw `${pluginName}: error in path '${pathStr}' empty values in the path mean array and should be at the end.`;\r\n                    }\r\n                } else {\r\n                    // Last step.\r\n                    if (indexOfBrackets > -1) {\r\n                        path[index] = step.replace(\"[]\", \"\");\r\n                        addArrayToPath = true;\r\n                    }\r\n                }\r\n            });\r\n            if (addArrayToPath) {\r\n                path.push(\"\"); // Add an empty element which means an array.\r\n            }\r\n        } else {\r\n            path = pathStr.split(\"[\").map((x, i) => x.replace(\"]\", \"\"));\r\n            pathLength = path.length;\r\n            path.forEach((step, index) => {\r\n                if(index !== pathLength - 1 && isStringNullOrEmpty(step))\r\n                    throw `${pluginName}: error in path '${pathStr}' empty values in the path mean array and should be at the end.`;\r\n            });\r\n        }\r\n        \r\n        this.searchAndSet(obj, path, 0, parsedValue);\r\n\r\n        return obj;\r\n    }\r\n\r\n    private static searchAndSet(currentObj: any, path: string[], pathIndex: number, parsedValue: any, arrayInternalIndex: number = 0) : any {\r\n        \r\n        var step: any = path[pathIndex];\r\n        var isFinalStep = pathIndex === path.length - 1; \r\n        var nextStep = path[pathIndex + 1];\r\n\r\n        if (currentObj == null || typeof currentObj == \"string\") {\r\n            path = path.map(x => isStringNullOrEmpty(x) ? \"[]\" : x);\r\n            console.log(`${pluginName}: there was an error in path '${path}' in step '${step}'.`);\r\n            throw `${pluginName}: error.`;\r\n        }\r\n        \r\n        var isArrayStep = isStringNullOrEmpty(step);\r\n        var isIntegerStep = isStringInteger(step);\r\n        var isNextStepAnArray = isStringInteger(nextStep) || isStringNullOrEmpty(nextStep);\r\n\r\n        //if (step == \"1.1\")\r\n        //    debugger;\r\n\r\n        if (isArrayStep) {\r\n            // It's an array.\r\n\r\n            if (isFinalStep) {\r\n                currentObj.push(parsedValue);\r\n                return;\r\n            } else {\r\n                if (currentObj[arrayInternalIndex] == null) {\r\n                    currentObj[arrayInternalIndex] = {};\r\n                }\r\n                step = arrayInternalIndex;\r\n                arrayInternalIndex++;\r\n            }\r\n\r\n        } else \r\n        if (isIntegerStep && this.options.useNumKeysAsArrayIndex) {\r\n            // It's a key of an array.\r\n\r\n            step = parseInt(step);\r\n\r\n            if (!isArray(currentObj)) {\r\n                currentObj = [];\r\n            }\r\n\r\n            if (isFinalStep) {\r\n                currentObj[step] = parsedValue;\r\n                return;\r\n            } else {\r\n                if(currentObj[step] == null)\r\n                    currentObj[step] = {};\r\n            }\r\n        } else {\r\n\r\n            // Create new property or override it.\r\n\r\n            if (isFinalStep) {\r\n                currentObj[step] = parsedValue;\r\n                return;\r\n            } else {\r\n                if (this.options.useNumKeysAsArrayIndex) {\r\n                    // We need to determine the next step.\r\n                    // If it will be an integer, we must build an array\r\n                    // instead of object.\r\n\r\n                    if (isNextStepAnArray) {\r\n                        if(!isArray(currentObj[step]))\r\n                            currentObj[step] = [];\r\n                    } else {\r\n                        if(currentObj[step] == null)\r\n                            currentObj[step] = {};\r\n                    }\r\n                } else {\r\n                    if(currentObj[step] == null)\r\n                        currentObj[step] = {};\r\n                }\r\n            }\r\n        }\r\n        pathIndex++;\r\n        \r\n        this.searchAndSet(currentObj[step], path, pathIndex, parsedValue, arrayInternalIndex);\r\n    }\r\n}","export function isStringJsonObject(arg: any): boolean {\r\n    try {\r\n        JSON.parse(arg);\r\n        return true;\r\n    } catch(e) {}\r\n    return false;\r\n}\r\n\r\nexport function isArray(arg: any): boolean {\r\n    return Array.isArray(arg);\r\n}\r\n\r\nexport function isStringNumber(arg: any): boolean {\r\n    return typeof arg == 'number' || /^[-+]?\\d+([Ee][+-]?\\d+)?(\\.\\d+)?$/.test(arg);\r\n}\r\n\r\nexport function isStringInteger(arg: any): boolean {\r\n    return /^[-+]?\\d+([Ee][+-]?\\d+)?$/.test(arg);\r\n}\r\n\r\nexport function isStringNullOrEmpty(arg: string): boolean {\r\n    return arg == null || arg.trim() === \"\";\r\n}\r\n\r\nexport const nodeListToArray = (nodeList: NodeListOf<Element>) : HTMLElement[] => {\r\n    return Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n}","﻿export { NSerializeJson } from \"./src/NSerializeJson\";\r\nexport { IOptions } from \"./src/IOptions\";\r\nexport { IValueParser } from \"./src/IValueParser\";","import { IValueParser } from \"./IValueParser\";\r\nimport { isStringNumber, isStringJsonObject, isStringNullOrEmpty } from \"./Util\";\r\n\r\nexport const parserList : IValueParser[] = [\r\n        {\r\n            name: \"auto\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : val;\r\n                }\r\n                var result = val.toString().trim();\r\n                if(result.toLowerCase() === \"null\")\r\n                    return null;\r\n                try {\r\n                    result = JSON.parse(result);\r\n                    return result;\r\n                } catch(e) {\r\n\r\n                }\r\n                var array = result.split(\",\");\r\n                if (array.length > 1) {\r\n                    result = array.map(x => {\r\n                        if (isStringNumber(x)) {\r\n                            return parseFloat(x);\r\n                        } else if(isStringJsonObject(x)) {\r\n                            return JSON.parse(x);\r\n                        }\r\n                        return x.trim();\r\n                    });\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n        {\r\n            name: \"number\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : 0;\r\n                }\r\n                if (isStringNumber(val)) {\r\n                    return parseFloat(val);\r\n                }\r\n                return 0;\r\n            }\r\n        },\r\n        {\r\n            name: \"boolean\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : false;\r\n                }\r\n                val = val.toString().toLowerCase();\r\n                if (val === \"true\" || val === \"1\") {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        },\r\n        {\r\n            name: \"string\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return null;\r\n                }\r\n                var result = val.toString().trim();\r\n                if(result.toLowerCase() === \"null\" || (result === \"\" && forceNull))\r\n                    return null;\r\n                return result;\r\n            }\r\n        },\r\n        {\r\n            name: \"array[auto]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => {\r\n                        var parser = parserList.filter(x => x.name === \"auto\")[0];\r\n                        return parser.parse(x.trim(), forceNull);\r\n                    }\r\n                );\r\n            }\r\n        },\r\n        {\r\n            name: \"array[string]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => x.trim().toString());\r\n            }\r\n        },\r\n        {\r\n            name: \"array[number]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => parseFloat(x.trim()));\r\n            }\r\n        },\r\n        {\r\n            name: \"json\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return {};\r\n                }\r\n                return JSON.parse(val);\r\n            }\r\n        }\r\n];","export const pluginName = \"NSerializeJson\";"],"sourceRoot":""}