{"version":3,"sources":["..\\webpack/universalModuleDefinition","..\\webpack/bootstrap","..\\./src/NSerializeJson.ts","..\\./src/Util.ts","..\\./index.ts","..\\./src/ParserList.ts","..\\./src/Constants.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","parseValue","options","parsers","type","isStringNullOrEmpty","filter","x","parse","forceNullOnEmpty","parser","Error","pluginName","serializeForm","htmlFormElement","Array","isArray","nodeList","querySelectorAll","checkedElements","nodeListToArray","disabled","getAttribute","checked","resultObject","forEach","serializeIntoObject","htmlElement","tagName","toLowerCase","nameAttr","isMultiSelect","selectElement","multiple","selectedOptionValues","from","map","valueType","typeIndex","indexOf","substring","length","path","onBeforeParseValue","parsedValue","useDotSeparatorInPath","addArrayToPath","split","pathIndexShift","pathIndex","step","undefined","indexOfBrackets","replace","leftBracketIndex","rightBracketIndex","arrayContent","slice","isStringInteger","splice","push","searchAndSet","currentObj","arrayInternalIndex","isLastStep","nextStep","isArrayStep","isIntegerStep","isNextStepAnArray","useNumKeysAsArrayIndex","arrayKey","parseInt","parserList","NSerializeJson","arg","JSON","e","test","trim","val","forceNull","result","toString","isStringNumber","parseFloat"],"mappings":"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","file":"nserializejson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NSerializeJson\"] = factory();\n\telse\n\t\troot[\"NSerializeJson\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { isStringNullOrEmpty, isStringInteger, isArray, nodeListToArray } from \"./Util\";\r\nimport { IValueParser } from \"./IValueParser\";\r\nimport { IOptions } from \"./IOptions\";\r\nimport { parserList } from \"./ParserList\";\r\nimport { pluginName } from \"./Constants\";\r\nimport { isNumber } from \"util\";\r\n\r\nexport class NSerializeJson {\r\n\r\n    static options: IOptions = {\r\n        useNumKeysAsArrayIndex: true,\r\n        useDotSeparatorInPath: false,\r\n        forceNullOnEmpty: false\r\n    };\r\n\r\n    public static parsers: IValueParser[] = [...parserList];\r\n\r\n    private static parseValue(options: IOptions, parsers: IValueParser[], value: any, type: string): any {        \r\n        if (isStringNullOrEmpty(type)) {\r\n            let autoParser = this.parsers.filter(x => x.name === \"auto\")[0];\r\n            return autoParser.parse(value, options.forceNullOnEmpty);\r\n        }\r\n        let parser = this.parsers.filter(x => x.name === type)[0];\r\n        if (parser == null) {\r\n            throw Error(`${pluginName}: couldn't find ther parser for type '${type}'.`);\r\n        }\r\n        return parser.parse(value, options.forceNullOnEmpty);\r\n    }\r\n\r\n    public static serializeForm(htmlFormElement: HTMLFormElement, options?: IOptions, parsers?: IValueParser[]): object {\r\n\r\n        if (options == null) {\r\n            options = this.options;\r\n        } else {\r\n            options = { ...this.options, ...options };\r\n        }\r\n\r\n        if (parsers == null) {\r\n            parsers = this.parsers;\r\n        } else {\r\n\r\n            if (!Array.isArray(parsers)) {\r\n                throw Error(`${pluginName}: 'parsers' arg in 'serializeForm' method must be an array or null.`);\r\n            }\r\n\r\n            parsers = { ...this.parsers, ...parsers };\r\n        }\r\n\r\n        let nodeList = htmlFormElement.querySelectorAll(\"input, select, textarea\");\r\n        let htmlInputElements = nodeListToArray(nodeList) as HTMLInputElement[];\r\n        let checkedElements = htmlInputElements.filter(x => {\r\n            if (x.disabled ||\r\n               ((x.getAttribute(\"type\") === \"radio\" && !x.checked) ||\r\n                (x.getAttribute(\"type\") === \"checkbox\" && !x.checked))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        let resultObject = {};\r\n        checkedElements.forEach(x => this.serializeIntoObject(options, parsers, resultObject, x));\r\n\r\n        return resultObject;\r\n    }\r\n\r\n    private static serializeIntoObject(options: IOptions, parsers: IValueParser[], resultObject: object, htmlElement: HTMLElement): any {\r\n\r\n        let value = null;\r\n\r\n        let tagName = htmlElement.tagName.toLowerCase();\r\n        let nameAttr = htmlElement.getAttribute(\"name\");\r\n        let isMultiSelect: boolean = false;\r\n\r\n        if (tagName === \"select\") {\r\n\r\n            let selectElement = htmlElement as HTMLSelectElement;\r\n\r\n            isMultiSelect = selectElement.multiple == true;\r\n\r\n            let selectedOptionValues =\r\n                Array\r\n                    .from(selectElement.options)\r\n                    .filter(x => x.selected)\r\n                    .map(x => x.getAttribute(\"value\"));\r\n\r\n            if (selectedOptionValues) {\r\n                value = selectedOptionValues;\r\n            }\r\n\r\n        } else {\r\n\r\n            value = (htmlElement as any).value;\r\n        }\r\n\r\n\r\n        if (isStringNullOrEmpty(nameAttr))\r\n            return resultObject;\r\n\r\n        let valueType: string = null;\r\n\r\n        let typeIndex = nameAttr.indexOf(\":\");\r\n\r\n        if (typeIndex > -1) {\r\n\r\n            valueType = nameAttr.substring(typeIndex + 1, nameAttr.length);\r\n\r\n            if (valueType === \"skip\") {\r\n                return resultObject;\r\n            }\r\n\r\n            nameAttr = nameAttr.substring(0, typeIndex);\r\n\r\n        } else {\r\n\r\n            valueType = htmlElement.getAttribute(\"data-value-type\");\r\n        }\r\n\r\n        let path = [];\r\n\r\n        if (options.onBeforeParseValue != null) {\r\n            value = options.onBeforeParseValue(value, valueType);\r\n        }\r\n        let parsedValue = this.parseValue(options, parsers, value, valueType);\r\n\r\n        if (options.useDotSeparatorInPath) {\r\n\r\n            let addArrayToPath: boolean = false;\r\n\r\n            path = nameAttr.split(\".\");\r\n\r\n            let pathIndexShift = 0;\r\n\r\n            for (let pathIndex = 0; pathIndex < path.length; pathIndex++) {\r\n\r\n                let step = path[pathIndex + pathIndexShift];\r\n\r\n                if (step === undefined)\r\n                    continue;\r\n\r\n                let emptyBrackets = \"[]\";\r\n\r\n                let indexOfBrackets = step.indexOf(emptyBrackets);\r\n\r\n                let hasEmptyBrackets = indexOfBrackets > -1;\r\n\r\n                if (hasEmptyBrackets) {\r\n\r\n                    // Empty brackets in path: [].\r\n                                                           \r\n                    if (pathIndex !== path.length - 1) {\r\n\r\n                        throw `${pluginName}: error in path '${nameAttr}' empty values in the path mean array and should be at the end.`;\r\n\r\n                    } else {\r\n\r\n                        // Last step.\r\n\r\n                        if (indexOfBrackets > -1) {\r\n\r\n                            path[pathIndex + pathIndexShift] = step.replace(emptyBrackets, \"\");\r\n\r\n                            if (!isMultiSelect) {\r\n                                addArrayToPath = true;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // Not empty brackets in path: [xxx].\r\n\r\n                    let leftBracketIndex = step.indexOf(\"[\"),\r\n                        rightBracketIndex = step.indexOf(\"]\");\r\n\r\n                    if (leftBracketIndex !== -1 && rightBracketIndex !== -1) {\r\n\r\n                        // Has content in brackets: [*content*].\r\n\r\n                        let arrayContent = step.slice(leftBracketIndex + 1, rightBracketIndex);\r\n                        path[pathIndex + pathIndexShift] = step.replace(`[${arrayContent}]`, \"\");\r\n\r\n                        if (!isStringNullOrEmpty(arrayContent) && !isStringInteger(arrayContent)) {\r\n                            throw Error(`Path '${nameAttr}' must be empty or contain a number in array brackets.`);\r\n                        }\r\n\r\n                        if (arrayContent) {\r\n                            path.splice(pathIndex + pathIndexShift + 1, 0, arrayContent);\r\n                        }\r\n\r\n                        pathIndexShift++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (addArrayToPath) {\r\n                // Add an empty element which means an array.\r\n                path.push(\"\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            // Bracket as a path separator.\r\n\r\n            path = nameAttr.split(\"[\").map((x, i) => x.replace(\"]\", \"\"));\r\n\r\n            path.forEach((step, pathIndex) => {\r\n\r\n                let isLastStep = pathIndex === path.length - 1;\r\n\r\n                if (!isLastStep && isStringNullOrEmpty(step)) {\r\n                    throw Error(`${pluginName}: error in path '${nameAttr}' empty values in the path mean array and should be at the end.`);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.searchAndSet(options, isMultiSelect, resultObject, path, 0, parsedValue);\r\n\r\n        return resultObject;\r\n    }\r\n\r\n    private static searchAndSet(options: IOptions, isMultiSelect: boolean, currentObj: any, path: string[], pathIndex: number, parsedValue: any, arrayInternalIndex: number = 0): any {\r\n\r\n        //if (isMultiSelect) {\r\n        //    console.log(currentObj);\r\n        //    debugger;\r\n        //}\r\n\r\n        let step: string = path[pathIndex];\r\n        if (step == undefined) {\r\n            step = null;\r\n        }\r\n\r\n        let isLastStep = true;\r\n\r\n        if (isMultiSelect) {\r\n            if (!options.useDotSeparatorInPath && path.length > 1 && isStringNullOrEmpty(step)) {\r\n                isLastStep = pathIndex === path.length - 2;\r\n            }\r\n            //else {\r\n            //    isLastStep = false;\r\n            //}\r\n        } else {\r\n            isLastStep = pathIndex === path.length - 1;\r\n        }\r\n\r\n        let nextStep = path[pathIndex + 1];\r\n\r\n        if (currentObj == null || typeof currentObj == \"string\") {\r\n            path = path.map(x => isStringNullOrEmpty(x) ? \"[]\" : x);\r\n            throw Error(`${pluginName}: there was an error in path '${path}' in step '${step}'.`);\r\n        }\r\n\r\n        //console.log(\"-----------------------\")\r\n\r\n        let isArrayStep = isStringNullOrEmpty(step); // If [].\r\n        let isIntegerStep = isStringInteger(step);\r\n        let isNextStepAnArray = isStringInteger(nextStep) || nextStep == \"\";\r\n\r\n        //if (step == \"1.1\")\r\n        //    debugger;\r\n\r\n        //console.log(\"isArrayStep:\", isArrayStep)\r\n        //console.log(\"isIntegerStep:\", isIntegerStep)\r\n        //console.log(\"isNextStepAnArray:\", isNextStepAnArray)\r\n        //console.log(\"path:\", path)\r\n        //console.log(\"step:\", step)\r\n        //console.log(\"nextStep:\", nextStep)\r\n\r\n        if (isArrayStep) {\r\n\r\n            // It's an array.\r\n\r\n            if (isLastStep) {\r\n\r\n                if (isMultiSelect && !options.useDotSeparatorInPath) {\r\n                    //let prevStep = path[pathIndex - 1];\r\n                    //console.log(currentObj);\r\n                    //console.log(prevStep);\r\n                    //console.log(parsedValue);\r\n                    //currentObj[prevStep] = parsedValue;\r\n                    ///?\r\n                } else {\r\n                }\r\n\r\n                if (!isMultiSelect) {\r\n\r\n\r\n                    currentObj.push(parsedValue);\r\n                }\r\n\r\n                return;\r\n\r\n            } else {\r\n\r\n                if (currentObj[arrayInternalIndex] == null) {\r\n                    currentObj[arrayInternalIndex] = {};\r\n                }\r\n\r\n                arrayInternalIndex++;\r\n            }\r\n\r\n        }\r\n        else if (isIntegerStep && options.useNumKeysAsArrayIndex) {\r\n            // It's a key of an array.\r\n\r\n            let arrayKey = parseInt(step);\r\n\r\n            if (!isArray(currentObj)) {\r\n                currentObj = [];\r\n            }\r\n\r\n            if (isLastStep) {\r\n                currentObj[arrayKey] = parsedValue;\r\n                return;\r\n            } else {\r\n                if (currentObj[arrayKey] == null) {\r\n                    currentObj[arrayKey] = {};\r\n                }\r\n            }\r\n        } else {\r\n\r\n            // Create new property or override it.\r\n\r\n            if (isLastStep) {\r\n\r\n                currentObj[step] = parsedValue;\r\n                return;\r\n\r\n            } else {\r\n\r\n                if (options.useNumKeysAsArrayIndex) {\r\n                    // We need to determine the next step.\r\n                    // If it will be an integer, we must build an array\r\n                    // instead of object.\r\n\r\n                    if (isNextStepAnArray) {\r\n                        if(!isArray(currentObj[step]))\r\n                            currentObj[step] = [];\r\n                    } else {\r\n                        if(currentObj[step] == null)\r\n                            currentObj[step] = {};\r\n                    }\r\n                } else {\r\n                    if(currentObj[step] == null)\r\n                        currentObj[step] = {};\r\n                }\r\n            }\r\n        }\r\n        pathIndex++;\r\n\r\n        this.searchAndSet(options, isMultiSelect, currentObj[step], path, pathIndex, parsedValue, arrayInternalIndex);\r\n    }\r\n}","export function isStringJsonObject(arg: any): boolean {\r\n    try {\r\n        JSON.parse(arg);\r\n        return true;\r\n    } catch(e) {}\r\n    return false;\r\n}\r\n\r\nexport function isArray(arg: any): boolean {\r\n    return Array.isArray(arg);\r\n}\r\n\r\nexport function isStringNumber(arg: any): boolean {\r\n    return typeof arg == 'number' || /^[-+]?\\d+([Ee][+-]?\\d+)?(\\.\\d+)?$/.test(arg);\r\n}\r\n\r\nexport function isStringInteger(arg: any): boolean {\r\n    return /^[-+]?\\d+([Ee][+-]?\\d+)?$/.test(arg);\r\n}\r\n\r\nexport function isStringNullOrEmpty(arg: string): boolean {\r\n    return arg == null || arg.trim() === \"\";\r\n}\r\n\r\nexport const nodeListToArray = (nodeList: NodeListOf<Element>) : HTMLElement[] => {\r\n    return Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n}","﻿export { NSerializeJson } from \"./src/NSerializeJson\";\r\nexport { IOptions } from \"./src/IOptions\";\r\nexport { IValueParser } from \"./src/IValueParser\";","import { IValueParser } from \"./IValueParser\";\r\nimport { isStringNumber, isStringJsonObject, isStringNullOrEmpty, isArray } from \"./Util\";\r\n\r\nexport const parserList : IValueParser[] = [\r\n        {\r\n            name: \"auto\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isArray(val)) {\r\n                    return val;\r\n                }\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : val;\r\n                }\r\n                var result = val.toString().trim();\r\n                if(result.toLowerCase() === \"null\")\r\n                    return null;\r\n                if (isStringNumber(val)) {\r\n                    return parseFloat(val);\r\n                }\r\n                try {\r\n                    result = JSON.parse(result);\r\n                    return result;\r\n                } catch(e) {\r\n\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n        {\r\n            name: \"number\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isArray(val)) {\r\n                    return val.map(x => parseInt(x));\r\n                }\r\n                if (typeof val === \"number\") {\r\n                    return val;\r\n                }\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : 0;\r\n                }\r\n                if (isStringNumber(val)) {\r\n                    return parseFloat(val);\r\n                }\r\n                return 0;\r\n            }\r\n        },\r\n        {\r\n            name: \"boolean\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : false;\r\n                }\r\n                val = val.toString().toLowerCase();\r\n                if (val === \"true\" || val === \"1\") {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        },\r\n        {\r\n            name: \"string\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return null;\r\n                }\r\n                var result = val.toString().trim();\r\n                if(result.toLowerCase() === \"null\" || (result === \"\" && forceNull))\r\n                    return null;\r\n                return result;\r\n            }\r\n        },\r\n        {\r\n            name: \"array[auto]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => {\r\n                        var parser = parserList.filter(x => x.name === \"auto\")[0];\r\n                        return parser.parse(x.trim(), forceNull);\r\n                    }\r\n                );\r\n            }\r\n        },\r\n        {\r\n            name: \"array[string]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => x.trim().toString());\r\n            }\r\n        },\r\n        {\r\n            name: \"array[number]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => parseFloat(x.trim()));\r\n            }\r\n        },\r\n        {\r\n            name: \"json\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return {};\r\n                }\r\n                return JSON.parse(val);\r\n            }\r\n        }\r\n];","export const pluginName = \"NSerializeJson\";"],"sourceRoot":""}