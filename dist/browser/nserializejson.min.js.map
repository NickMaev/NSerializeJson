{"version":3,"sources":["..\\webpack/universalModuleDefinition","..\\webpack/bootstrap","..\\./src/NSerializeJson.ts","..\\./src/Util.ts","..\\./index.ts","..\\./src/ParserList.ts","..\\./src/Constants.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","parseValue","options","parsers","type","isStringNullOrEmpty","filter","x","parse","forceNullOnEmpty","parser","pluginName","serializeForm","htmlFormElement","Array","isArray","Error","nodeList","querySelectorAll","checkedElements","nodeListToArray","disabled","getAttribute","checked","resultObject","forEach","serializeIntoObject","obj","htmlElement","tagName","toLowerCase","firstSelectOpt","from","pathStr","path","typeIndex","indexOf","substring","length","onBeforeParseValue","parsedValue","useDotSeparatorInPath","addArrayToPath","split","pathIndexShift","index","step","undefined","indexOfBrackets","leftBracketIndex","rightBracketIndex","arrayContent","slice","replace","isStringInteger","splice","push","map","searchAndSet","currentObj","pathIndex","arrayInternalIndex","isFinalStep","nextStep","console","log","isArrayStep","isIntegerStep","isNextStepAnArray","useNumKeysAsArrayIndex","arrayKey","parseInt","parserList","NSerializeJson","arg","JSON","e","test","trim","val","forceNull","result","toString","array","isStringNumber","parseFloat","isStringJsonObject"],"mappings":"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","file":"nserializejson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NSerializeJson\"] = factory();\n\telse\n\t\troot[\"NSerializeJson\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { isStringNullOrEmpty, isStringInteger, isArray, nodeListToArray } from \"./Util\";\r\nimport { IValueParser } from \"./IValueParser\";\r\nimport { IOptions } from \"./IOptions\";\r\nimport { parserList } from \"./ParserList\";\r\nimport { pluginName } from \"./Constants\";\r\nimport { isNumber } from \"util\";\r\n\r\nexport class NSerializeJson {\r\n\r\n    static options: IOptions = {\r\n        useNumKeysAsArrayIndex: true,\r\n        useDotSeparatorInPath: false,\r\n        forceNullOnEmpty: false\r\n    };\r\n\r\n    public static parsers: IValueParser[] = [...parserList];\r\n\r\n    private static parseValue(options: IOptions, parsers: IValueParser[], value: string, type: string): any {        \r\n        if (isStringNullOrEmpty(type)) {\r\n            var autoParser = this.parsers.filter(x => x.name === \"auto\")[0];\r\n            return autoParser.parse(value, options.forceNullOnEmpty);\r\n        }\r\n        var parser = this.parsers.filter(x => x.name === type)[0];\r\n        if (parser == null) {\r\n            throw `${pluginName}: couldn't find ther parser for type '${type}'.`;\r\n        }\r\n        return parser.parse(value, options.forceNullOnEmpty);\r\n    }\r\n\r\n    public static serializeForm(htmlFormElement: HTMLFormElement, options?: IOptions, parsers?: IValueParser[]): object {\r\n\r\n        if (options == null) {\r\n            options = this.options;\r\n        } else {\r\n            options = { ...this.options, ...options };\r\n        }\r\n\r\n        if (parsers == null) {\r\n            parsers = this.parsers;\r\n        } else {\r\n\r\n            if (!Array.isArray(parsers)) {\r\n                throw Error(\"'parsers' arg in 'serializeForm' method must be an array or null.\");\r\n            }\r\n\r\n            parsers = { ...this.parsers, ...parsers };\r\n        }\r\n\r\n        var nodeList = htmlFormElement.querySelectorAll(\"input, select, textarea\");\r\n        var htmlInputElements = nodeListToArray(nodeList) as HTMLInputElement[];\r\n        var checkedElements = htmlInputElements.filter(x => {\r\n            if (x.disabled ||\r\n               ((x.getAttribute(\"type\") === \"radio\" && !x.checked) ||\r\n                (x.getAttribute(\"type\") === \"checkbox\" && !x.checked))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        var resultObject = {};\r\n        checkedElements.forEach(x => this.serializeIntoObject(options, parsers, resultObject, x));\r\n\r\n        return resultObject;\r\n    }\r\n\r\n    private static serializeIntoObject(options: IOptions, parsers: IValueParser[], obj: any, htmlElement: HTMLElement): any {\r\n\r\n        var value = null;\r\n        if (htmlElement.tagName.toLowerCase() === \"select\") {\r\n            var firstSelectOpt = Array.from((htmlElement as any).options).filter(x => (x as any).selected)[0] as any;\r\n            if (firstSelectOpt) {\r\n                value = firstSelectOpt.getAttribute(\"value\");\r\n            }\r\n        } else {\r\n            value = (htmlElement as any).value;\r\n        }\r\n        var pathStr = htmlElement.getAttribute(\"name\");\r\n        if (isStringNullOrEmpty(pathStr))\r\n            return obj;\r\n        var path = [];\r\n        var type:string = null;\r\n        var typeIndex = pathStr.indexOf(\":\");\r\n        if (typeIndex > -1) {\r\n            type = pathStr.substring(typeIndex + 1, pathStr.length);\r\n            if (type === \"skip\") {\r\n                return obj;\r\n            }\r\n            pathStr = pathStr.substring(0, typeIndex);\r\n        } else {\r\n            type = htmlElement.getAttribute(\"data-value-type\");\r\n        }\r\n\r\n        if (options.onBeforeParseValue != null) {\r\n            value = options.onBeforeParseValue(value, type);\r\n        }\r\n        var parsedValue = this.parseValue(options, parsers, value, type);\r\n\r\n        if (options.useDotSeparatorInPath) {\r\n            var addArrayToPath: boolean = false;\r\n            path = pathStr.split(\".\");\r\n\r\n            var pathIndexShift = 0;\r\n\r\n            for (var index = 0; index < path.length; index++) {\r\n\r\n                var step = path[index + pathIndexShift];\r\n\r\n                if (step === undefined)\r\n                    continue;\r\n\r\n                var indexOfBrackets = step.indexOf(\"[]\");\r\n\r\n                if (indexOfBrackets === -1) {\r\n\r\n                    // Not empty brackets: [].\r\n\r\n                    var leftBracketIndex = step.indexOf(\"[\"),\r\n                        rightBracketIndex = step.indexOf(\"]\");\r\n\r\n                    if (leftBracketIndex !== -1 && rightBracketIndex !== -1) {\r\n\r\n                        // Has content in brackets: [*content*].\r\n\r\n                        var arrayContent = step.slice(leftBracketIndex + 1, rightBracketIndex);\r\n                        path[index + pathIndexShift] = step.replace(`[${arrayContent}]`, \"\");\r\n\r\n                        if (!isStringNullOrEmpty(arrayContent) && !isStringInteger(arrayContent)) {\r\n                            throw Error(`Path '${pathStr}' must be empty or contain a number in array brackets.`);\r\n                        }\r\n\r\n                        if (arrayContent) {\r\n                            path.splice(index + pathIndexShift + 1, 0, arrayContent);\r\n                        }\r\n\r\n                        pathIndexShift++;\r\n                    }\r\n\r\n                } else {\r\n                    if (index !== path.length - 1) {\r\n                        if (indexOfBrackets > -1 && indexOfBrackets !== path.length - 1) {\r\n                            //console.log(indexOfBrackets);\r\n                            //console.log(index);\r\n                            //console.log(path.length);\r\n                            throw `${pluginName}: error in path '${pathStr}' empty values in the path mean array and should be at the end.`;\r\n                        }\r\n                    } else {\r\n                        // Last step.\r\n                        if (indexOfBrackets > -1) {\r\n                            path[index + pathIndexShift] = step.replace(\"[]\", \"\");\r\n                            addArrayToPath = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (addArrayToPath) {\r\n                path.push(\"\"); // Add an empty element which means an array.\r\n            }\r\n\r\n        } else {\r\n            path = pathStr.split(\"[\").map((x, i) => x.replace(\"]\", \"\"));\r\n            path.forEach((step, index) => {\r\n                if (index !== path.length - 1 && isStringNullOrEmpty(step))\r\n                    throw `${pluginName}: error in path '${pathStr}' empty values in the path mean array and should be at the end.`;\r\n            });\r\n        }\r\n        \r\n        this.searchAndSet(options, obj, path, 0, parsedValue);\r\n\r\n        return obj;\r\n    }\r\n\r\n    private static searchAndSet(options, currentObj: any, path: string[], pathIndex: number, parsedValue: any, arrayInternalIndex: number = 0) : any {\r\n        \r\n        var step: any = path[pathIndex];\r\n        var isFinalStep = pathIndex === path.length - 1; \r\n        var nextStep = path[pathIndex + 1];\r\n\r\n        if (currentObj == null || typeof currentObj == \"string\") {\r\n            path = path.map(x => isStringNullOrEmpty(x) ? \"[]\" : x);\r\n            console.log(`${pluginName}: there was an error in path '${path}' in step '${step}'.`);\r\n            throw `${pluginName}: error.`;\r\n        }\r\n\r\n        console.log(\"-----------------------\")\r\n        \r\n        var isArrayStep = isStringNullOrEmpty(step); // If [].\r\n        var isIntegerStep = isStringInteger(step);\r\n        var isNextStepAnArray = isStringInteger(nextStep) || nextStep == \"\";\r\n\r\n        //if (step == \"1.1\")\r\n        //    debugger;\r\n\r\n        //console.log(\"isArrayStep:\", isArrayStep)\r\n        //console.log(\"isIntegerStep:\", isIntegerStep)\r\n        //console.log(\"isNextStepAnArray:\", isNextStepAnArray)\r\n        //console.log(\"path:\", path)\r\n        //console.log(\"step:\", step)\r\n        //console.log(\"nextStep:\", nextStep)\r\n\r\n        if (isArrayStep) {\r\n            // It's an array.\r\n\r\n            if (isFinalStep) {\r\n                currentObj.push(parsedValue);\r\n                return;\r\n            } else {\r\n                if (currentObj[arrayInternalIndex] == null) {\r\n                    currentObj[arrayInternalIndex] = {};\r\n                }\r\n                step = arrayInternalIndex;\r\n                arrayInternalIndex++;\r\n            }\r\n\r\n        } else \r\n        if (isIntegerStep && options.useNumKeysAsArrayIndex) {\r\n            // It's a key of an array.\r\n\r\n            var arrayKey = parseInt(step);\r\n\r\n            if (!isArray(currentObj)) {\r\n                currentObj = [];\r\n            }\r\n\r\n            if (isFinalStep) {\r\n                currentObj[arrayKey] = parsedValue;\r\n                return;\r\n            } else {\r\n                if (currentObj[arrayKey] == null) {\r\n                    currentObj[arrayKey] = {};\r\n                }\r\n            }\r\n        } else {\r\n\r\n            // Create new property or override it.\r\n\r\n            if (isFinalStep) {\r\n                currentObj[step] = parsedValue;\r\n                return;\r\n            } else {\r\n                if (options.useNumKeysAsArrayIndex) {\r\n                    // We need to determine the next step.\r\n                    // If it will be an integer, we must build an array\r\n                    // instead of object.\r\n\r\n                    if (isNextStepAnArray) {\r\n                        if(!isArray(currentObj[step]))\r\n                            currentObj[step] = [];\r\n                    } else {\r\n                        if(currentObj[step] == null)\r\n                            currentObj[step] = {};\r\n                    }\r\n                } else {\r\n                    if(currentObj[step] == null)\r\n                        currentObj[step] = {};\r\n                }\r\n            }\r\n        }\r\n        pathIndex++;\r\n        \r\n        this.searchAndSet(options, currentObj[step], path, pathIndex, parsedValue, arrayInternalIndex);\r\n    }\r\n}","export function isStringJsonObject(arg: any): boolean {\r\n    try {\r\n        JSON.parse(arg);\r\n        return true;\r\n    } catch(e) {}\r\n    return false;\r\n}\r\n\r\nexport function isArray(arg: any): boolean {\r\n    return Array.isArray(arg);\r\n}\r\n\r\nexport function isStringNumber(arg: any): boolean {\r\n    return typeof arg == 'number' || /^[-+]?\\d+([Ee][+-]?\\d+)?(\\.\\d+)?$/.test(arg);\r\n}\r\n\r\nexport function isStringInteger(arg: any): boolean {\r\n    return /^[-+]?\\d+([Ee][+-]?\\d+)?$/.test(arg);\r\n}\r\n\r\nexport function isStringNullOrEmpty(arg: string): boolean {\r\n    return arg == null || arg.trim() === \"\";\r\n}\r\n\r\nexport const nodeListToArray = (nodeList: NodeListOf<Element>) : HTMLElement[] => {\r\n    return Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n}","﻿export { NSerializeJson } from \"./src/NSerializeJson\";\r\nexport { IOptions } from \"./src/IOptions\";\r\nexport { IValueParser } from \"./src/IValueParser\";","import { IValueParser } from \"./IValueParser\";\r\nimport { isStringNumber, isStringJsonObject, isStringNullOrEmpty } from \"./Util\";\r\n\r\nexport const parserList : IValueParser[] = [\r\n        {\r\n            name: \"auto\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : val;\r\n                }\r\n                var result = val.toString().trim();\r\n                if(result.toLowerCase() === \"null\")\r\n                    return null;\r\n                try {\r\n                    result = JSON.parse(result);\r\n                    return result;\r\n                } catch(e) {\r\n\r\n                }\r\n                var array = result.split(\",\");\r\n                if (array.length > 1) {\r\n                    result = array.map(x => {\r\n                        if (isStringNumber(x)) {\r\n                            return parseFloat(x);\r\n                        } else if(isStringJsonObject(x)) {\r\n                            return JSON.parse(x);\r\n                        }\r\n                        return x.trim();\r\n                    });\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n        {\r\n            name: \"number\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : 0;\r\n                }\r\n                if (isStringNumber(val)) {\r\n                    return parseFloat(val);\r\n                }\r\n                return 0;\r\n            }\r\n        },\r\n        {\r\n            name: \"boolean\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return forceNull ? null : false;\r\n                }\r\n                val = val.toString().toLowerCase();\r\n                if (val === \"true\" || val === \"1\") {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        },\r\n        {\r\n            name: \"string\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    return null;\r\n                }\r\n                var result = val.toString().trim();\r\n                if(result.toLowerCase() === \"null\" || (result === \"\" && forceNull))\r\n                    return null;\r\n                return result;\r\n            }\r\n        },\r\n        {\r\n            name: \"array[auto]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => {\r\n                        var parser = parserList.filter(x => x.name === \"auto\")[0];\r\n                        return parser.parse(x.trim(), forceNull);\r\n                    }\r\n                );\r\n            }\r\n        },\r\n        {\r\n            name: \"array[string]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => x.trim().toString());\r\n            }\r\n        },\r\n        {\r\n            name: \"array[number]\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return [];\r\n                } \r\n                return val.split(\",\").map(x => parseFloat(x.trim()));\r\n            }\r\n        },\r\n        {\r\n            name: \"json\",\r\n            parse: (val: any, forceNull: boolean): any => {\r\n                if (isStringNullOrEmpty(val)) {\r\n                    if (forceNull)\r\n                        return null;\r\n                    return {};\r\n                }\r\n                return JSON.parse(val);\r\n            }\r\n        }\r\n];","export const pluginName = \"NSerializeJson\";"],"sourceRoot":""}